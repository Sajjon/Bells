import XCTest
@testable import Bells
import BigInt
import Security
import Algorithms
import XCTAssertBytesEqual
import SwiftCheck
#if SWIFT_PACKAGE
import FileCheck
#endif


final class Fp12Tests: FieldTest<Fp12> {
    
    func test_cyclotomicExponentiation() throws {

        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let cyclotomicExp = a.cyclotomicExp(n: BigInt(hex: "5181ae2d66551040faf17b455385b2184829bc6801a1ff2d07dccc3361506b1a9a2fabdedc6584f17cbe1861e5576ef"))
        
        let expected = Fp12.init(coeffs: [
            "0042ac9f71358bb37152880a3e24de603e755f5df1fd715f2da820e5911ced51421bd17d4541fea0f27cf33d51ad13b3",
            "19f5062fd6fda6bebe1e015aaf9952b8e000160f85d6245c3d409991e612097b72b4ac13b027d90abb2a8206b3611a4b",
            "0116dbbe823b3a276d3037012e358a231da2559ea3fe39f3677de1039fc40b45e791c1a7ebf2dbdb3b0bb4d9fc733ef0",
            "0adb4fb96ab40d6fff4396a149d8cc14a2a4104d00216d73156698aaf760561883cc9ec30e473724d59c69c533700db5",
            "189805e793022a3b02be0d1ae550b3e37838da73da5912fc4a3c37b7e779f01e27fa1bf32eb74a508dea45c74e33d6fa",
            "0d828f87c9444eb71dea96f747b8224c8b7d8f1c2179432cc50e5448cbe8d74353bf7a5d14776ada7b0e9a383639bb5e",
            "0ea2250342366d74001d8ff1f6c2e5f2de36f5eb6870091be2938703c236d5789f82dca15b22a908ac2550ae58df99f5",
            "085f2f7b0375c33d34c18be184cff27e2346784ee45bc59dbd5479f69b49e7effdb77bbeb3f6235404ffb7f873fe596e",
            "1845d30b3e6d44d82fd3f2cdbee496476ac5ef2517c0c0226a2808db79aff188d8c7a499a3b0cb29f51b9dc068b1f367",
            "0df4c29bffa7d474879e5a490403ddd88cb3621ad985f406d5b12ae9c03a4df3fe35e71bdc972c2e87740d06ac9265ea",
            "0abda6422606488136aa220a480c59daa8fc4ce2f08d56319345c38a9bc910d18c27a5107a66dac5b1cc4127ec9481c4",
            "06f05e34472c00407789c56626df20ddf77f8a13f1c0d347c9fca97db2cc010ef8a342e2b9605c6bacb73eac3e2d43f3"
        ].map(BigInt.init(hex:)))
                     
        XCTAssertEqual(cyclotomicExp, expected)
    }
    
    func test_cyclotomicSquare() throws {

        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let cyclotomicSquare = a.cyclotomicSquare()
        
        let expected = Fp12.init(coeffs: [
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ed8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000588d",
            "0207ba9c7a2b7f9dc292d97a63bf37417618d4c905b429dfc5143af94d1baf79902c5806e85d73b5530cfab9a1fb2e10",
            "067ee72fac8bab1a30bb99d7661f3986b41256679a8eb8c317ec9f9ba4e60b30cfe0b7d9edf03484600c6469c6a41719",
            "093eef0334059377e4fd5407be3ff6f02c9418c4a565653adb4a85d462575181a34f3fb1348f19aed6c720b2a617046f",
            "0c8d8f2f27118ab59f3bdf46d5d8892937cb795ad0fbfbe7994908ddb0e395eeaba9e3e98f81cd30261b34a67b6db234",
            "093b4ed694d7995d866bdf3272a3faaddb3ecb22e00b25f8da9ceb5a74d1b783437bc963473239db6708266556b4d67b",
            "0d4440f1bde7e5ddd27ffb0c291b567232f1608e0b988cb5ee112066d684404fbeed3bbdd14278f59932dda6c20aa147",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffff66c1",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002846",
            "120f79a6b9194c5dacd76ed7aa016855be479f1611bc8e3e5fa212611820c2eb2f528f53043dbdd37b93257634782a6b",
            "0c46b1673dcb195a56c5673832b7b33a2bb470640f7bfc41e9a4972855812633bcc472146266af2d8b77468ad16c7369",
        ].map(BigInt.init(hex:)))
                     
        XCTAssertEqual(cyclotomicSquare, expected)
    }
}

extension Fp12: Arbitrary {
    public static var arbitrary: Gen<Self> {
        .compose { composer in
            Self(
                c0: composer.generate(using: Fp6.arbitrary),
                c1: composer.generate(using: Fp6.arbitrary)
            )
        }
    }
}
