import XCTest
@testable import Bells
import BigInt
import Security
import Algorithms
import XCTAssertBytesEqual
import SwiftCheck
#if SWIFT_PACKAGE
import FileCheck
#endif


final class Fp12Tests: FieldTest<Fp12> {
    func test_cyclotomicSquare() throws {

        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let cyclotomicSquare = a.cyclotomicSquare()
        
        let expected = Fp12.init(coeffs: [
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ed8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000588d",
            "0207ba9c7a2b7f9dc292d97a63bf37417618d4c905b429dfc5143af94d1baf79902c5806e85d73b5530cfab9a1fb2e10",
            "067ee72fac8bab1a30bb99d7661f3986b41256679a8eb8c317ec9f9ba4e60b30cfe0b7d9edf03484600c6469c6a41719",
            "093eef0334059377e4fd5407be3ff6f02c9418c4a565653adb4a85d462575181a34f3fb1348f19aed6c720b2a617046f",
            "0c8d8f2f27118ab59f3bdf46d5d8892937cb795ad0fbfbe7994908ddb0e395eeaba9e3e98f81cd30261b34a67b6db234",
            "093b4ed694d7995d866bdf3272a3faaddb3ecb22e00b25f8da9ceb5a74d1b783437bc963473239db6708266556b4d67b",
            "0d4440f1bde7e5ddd27ffb0c291b567232f1608e0b988cb5ee112066d684404fbeed3bbdd14278f59932dda6c20aa147",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffff66c1",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002846",
            "120f79a6b9194c5dacd76ed7aa016855be479f1611bc8e3e5fa212611820c2eb2f528f53043dbdd37b93257634782a6b",
            "0c46b1673dcb195a56c5673832b7b33a2bb470640f7bfc41e9a4972855812633bcc472146266af2d8b77468ad16c7369",
        ].map(BigInt.init(hex:)))
                     
        XCTAssertEqual(cyclotomicSquare, expected)
    }
}

extension Fp12: Arbitrary {
    public static var arbitrary: Gen<Self> {
        .compose { composer in
            Self(
                c0: composer.generate(using: Fp6.arbitrary),
                c1: composer.generate(using: Fp6.arbitrary)
            )
        }
    }
}
