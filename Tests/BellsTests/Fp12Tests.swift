import XCTest
@testable import Bells
import BigInt
import Security
import Algorithms
import XCTAssertBytesEqual
import SwiftCheck
#if SWIFT_PACKAGE
import FileCheck
#endif



final class Fp12Tests: FieldTest<Fp12> {
    
    func test_frob() {
        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let frobMap6Expected = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa48",
            "03027f1b20ada6ff58cde2f40e1c21c59d77d8c9e1d87bd5423fe2c1d7da6b02d214e4f82797934e2edf1bd82c0e56bf",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9e",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaa8",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f",
        ].map(BigInt.init(hex:)))
        
        let frobMap6 = a.frobeniusMap(power: 6)
        
        XCTAssertEqual(frobMap6, frobMap6Expected)
    }
    
    func test_frobMap6_division() throws {
        
        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let aInv = try a.inverted()
        
        let expectedInverted = Fp12.init(coeffs: [
          "170ac059f9612f497b918f87dc15fbbca5ca218661be46b4236709617a1d3757e6d292c9b58cf250cc5a64418f050794",
          "106dfbaca506cf2054700e9e0bdd4cd3881a5397b65cb3a6b80938b3425a92b576120252a18163b1d565189e88798b77",
          "0626566f1b4ca705c05f6d874929b34d276e42a9c842039f5c4a1a9784e1ebd5d20e60cb6de6556c0ca7d362004177da",
          "0a683f25f6ad936b940c95b541b7dc751ca72e38710d2c7096fe1238ce6be372c9fb2bdfcd3ec56a6a7673bfa666567b",
          "16dd8323232e5879d95ecefbf85425b10e1f7188765cf0266e09fa173240fdd2a4d99e5fd9bd75e36b7f4f9bedebc93f",
          "0a0b48b27e8155e174cbdffece2cbbec130852ecaa1fe731a7ba707a91c900554cca3fc8060ac48d05b0321565ad039d",
          "146b2b33a39d93b5a53bfb17f6ac39df43da85302fde72a548488765fe73a8607f0780e42402bcef707054f82c3f6224",
          "0a3533ac89fa2556681e9bd3d082f85c67418457a205237991c49e8bc8e5d6f9403c1056e8ad47526caa0fa043894d42",
          "1749782bd15abd1a2d342fe46f43084be1d4d2ecd268b5d78a54fe75606bdb837fab8173a4a240988b4c91ea817f8bea",
          "01ac3cf3b465233faec5a446e8f6cca7108d405e419c299fd2673c390e5eb6123ece4b7e8ae2403ad4d6910422b36bc0",
          "0ecbc70f3a86f84ce29ce8e4bd3cbeb1fb8394f2e809b0f125419d21df10c7c262e861e81d28ae9cdfcd7f787538d95b",
          "040416b5fca2a68c2573314262c9e01900563fa1133b26dbf84df15e18c5fda4e9a5c4ec4a7b1826ab03fc991e63e646",
        ].map(BigInt.init(hex:)))
       
        XCTAssertEqual(aInv, expectedInverted)
        
        let frobMap6Expected = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa48",
            "03027f1b20ada6ff58cde2f40e1c21c59d77d8c9e1d87bd5423fe2c1d7da6b02d214e4f82797934e2edf1bd82c0e56bf",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9e",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaa8",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f",
        ].map(BigInt.init(hex:)))
        
        let frobMap6 = a.frobeniusMap(power: 6)
        
        XCTAssertEqual(frobMap6, frobMap6Expected)
        
        let frobMap6DivSelf = try frobMap6 / a
        
        let expected = Fp12.init(coeffs: [
            "0271d279499e7b1e44e85d2597fd4f7dcbb4c0a74b9c0090acee7e2759ef93bc9cd2387a92ce336b7e4cb0b76c6052f4",
            "0135b3a48844bf6ebf500723a59b0b9a353e171e07996d27e23e7faffaad3adb3a2d12f95bfd3a86cffc5ceaeead3fcb",
            "133282f9dc4f8b48d6a7173ea1ec18fc084905dd29fe9e7454192c30130c130927fdaffd7abf7eccf8484df7b7447419",
            "0474948c86288780fd6a7ed541327804ad9a921881c50a4d848ffc95ee05e810c04c4f65aa449022648e62c8a452fcc5",
            "15f943714d951f51159bd7df183570bfb18517053a79d6c0663157ba9ef161bb5131724a0cd016a5d7cd826f898c1622",
            "1824ed1ea7dc25d290e28a630430c5adee4ccba2f4684c79b3b79ae2dac7ec6481e7e17b71444223d755c85ad23e3f0a",
            "04cb3286a3da6274df1893c44da63d18607862246bb794bb35fee2909c565ffcf2daaa296016c7eb6077f3228e0687ff",
            "0c5834a088bfca934ba79958d471c1f6ff01ab703dbcd4a97ce8253756ce49b716870c9d1da22f09446eace17371807f",
            "01a5b04370943d27d36f7f37021c9257929f71f2c142ffe5ca34fcee37e167190e78cfa0a54397f84bcd7b67640351ef",
            "0e9418e9692a9d97c0ab18736c6ad5f2f903ed4e53fc50769ec79ee1b68894149731b336b8cccbf7c1a7be56d29fa57b",
            "077840baee90c0c9868c7a9b8749b99beac0797d71dccf427fd3e50ddc4eb02c9185a6125f56a37396503bb9a09a6890",
            "0b6fedbdc34cbb5e65f5bed5782023b62b9ecc87cc434b7968e8cf4a780896dc0496d61fda499cbb3596ed433cee68a9",
        ].map(BigInt.init(hex:)))
        
        XCTAssertEqual(frobMap6DivSelf, expected)
    }
    
    func doTestFp12(_ lhs: Fp12, _ rhs: Fp12, _ keyPath: KeyPath<Fp12, Fp>, line: UInt = #line) {
        let sut = lhs[keyPath: keyPath].value
        let exp = rhs[keyPath: keyPath].value
        XCTAssertEqual(sut, exp, "got: \(sut.debugDescription)", line: line)
    }
    
    func test_finalExp() throws {
        
        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let sut = try a.finalExponentiate()
        
        let expected = Fp12.init(coeffs: [
            "0a2b7db0586728c4a9b72ef23883a1cd87d3c430babdb59e1ce2630458f4ff2e75d1b5dea63b8fd9560b0366a7fd04d3",
            "0b14c929e25c35a42cc1666b80bec7b9343893972cc75a1415ec77943ed5c7919d343beae8e47c44fc7f919d8da5f5bd",
            "05c4537782ca6495b34e45787cd6a0d3d856c819b54bbbe0dee012bfcb42b385541c61ff2b488777eb692de68ed98f5f",
            "19553653cb37cb1a6b0dcee63c8f9f751224e6f0e5839831f2f2f5c9fae536ca661ddd14be6a2744aa0ab3a1e2941ef7",
            "06e885b04abdfee78fe2705686156a3e94f2add90030a9330f7ffdb7fd6d3c5e99574f1bdb93daeed545e158d074256e",
            "0b89b5594c50ca9222e7e03d9bf00f10c045cfffcd8cf588702d4f0294d959b8f9964690687831c4aab69a25d5e5eee4",
            "0bd940d17bdeff1223639b3759892b6ef76f0e5fa3d3667ff76a4d660067e6eaafd3680ef88e0703d653df7b0397f643",
            "067f61c9d365b7b57b666f83cf3e6e0be2d0e80909d410cd5ea7a8103a7983a81d5976bf1e4ffa0aa7b0374bc0b332e3",
            "0c29245f0ebfdb55c4e3cf2d46fbc85e85e65f1742c5d616e963b5e41664e74f6845d80898a2d4ce8c89945116c1f0b2",
            "1404750201a6cd656166462451a3212328eccfe8a08b30ddff8b82f731997388550c84b09f558898f8bd5f04a54ec7f9",
            "0da1fa4d23df37fa787cfb3d65af4b0419f7c9078a1cc7de751c8b6f53f156b3ca768004ea0104c05c376acd68821870",
            "170507dcb391b1c9fa764fd47c4159ff98898ecd7a34c61a6342ee0504382de409d53ac63f9eed4c32cf02fe27648580",
        ].map(BigInt.init(hex:)))
        
        func doTest(_ keyPath: KeyPath<Fp12, Fp>, line: UInt = #line) {
            doTestFp12(sut, expected, keyPath, line: line)
        }
        
        doTest(\.c0.c0.c0)
        doTest(\.c0.c0.c1)
        doTest(\.c0.c1.c0)
        doTest(\.c0.c1.c1)
        doTest(\.c0.c2.c0)
        doTest(\.c0.c2.c1)
        doTest(\.c1.c0.c0)
        doTest(\.c1.c0.c1)
        doTest(\.c1.c1.c0)
        doTest(\.c1.c1.c1)
        doTest(\.c1.c2.c0)
        doTest(\.c1.c2.c1)
        
        XCTAssertEqual(sut, expected)
        
        
    }
    
    func test_cyclotomicExponentiation() throws {
        
        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let cyclotomicExp = a.cyclotomicExp(n: BigInt(hex: "5181ae2d66551040faf17b455385b2184829bc6801a1ff2d07dccc3361506b1a9a2fabdedc6584f17cbe1861e5576ef"))
        
        let expected = Fp12.init(coeffs: [
            "0042ac9f71358bb37152880a3e24de603e755f5df1fd715f2da820e5911ced51421bd17d4541fea0f27cf33d51ad13b3",
            "19f5062fd6fda6bebe1e015aaf9952b8e000160f85d6245c3d409991e612097b72b4ac13b027d90abb2a8206b3611a4b",
            "0116dbbe823b3a276d3037012e358a231da2559ea3fe39f3677de1039fc40b45e791c1a7ebf2dbdb3b0bb4d9fc733ef0",
            "0adb4fb96ab40d6fff4396a149d8cc14a2a4104d00216d73156698aaf760561883cc9ec30e473724d59c69c533700db5",
            "189805e793022a3b02be0d1ae550b3e37838da73da5912fc4a3c37b7e779f01e27fa1bf32eb74a508dea45c74e33d6fa",
            "0d828f87c9444eb71dea96f747b8224c8b7d8f1c2179432cc50e5448cbe8d74353bf7a5d14776ada7b0e9a383639bb5e",
            "0ea2250342366d74001d8ff1f6c2e5f2de36f5eb6870091be2938703c236d5789f82dca15b22a908ac2550ae58df99f5",
            "085f2f7b0375c33d34c18be184cff27e2346784ee45bc59dbd5479f69b49e7effdb77bbeb3f6235404ffb7f873fe596e",
            "1845d30b3e6d44d82fd3f2cdbee496476ac5ef2517c0c0226a2808db79aff188d8c7a499a3b0cb29f51b9dc068b1f367",
            "0df4c29bffa7d474879e5a490403ddd88cb3621ad985f406d5b12ae9c03a4df3fe35e71bdc972c2e87740d06ac9265ea",
            "0abda6422606488136aa220a480c59daa8fc4ce2f08d56319345c38a9bc910d18c27a5107a66dac5b1cc4127ec9481c4",
            "06f05e34472c00407789c56626df20ddf77f8a13f1c0d347c9fca97db2cc010ef8a342e2b9605c6bacb73eac3e2d43f3"
        ].map(BigInt.init(hex:)))
        
        XCTAssertEqual(cyclotomicExp, expected)
    }
    
    func test_cyclotomicSquare() throws {
        
        let a = Fp12.init(coeffs: [
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa5d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa70",
            "023ca1624e6b67d868054dc4171231499cf22de5bd10db1b56195183bf585a80e9e2f787859e8d26940dfa8c5877e0c8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
            "16fe92cf18d23f9af24dc4c2352f8b11c6ff72bb11ac96ea24f0efdf1ed68b214c971b0689bc6cb18b1fe427d3f153ec",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa8b",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c",
        ].map(BigInt.init(hex:)))
        
        let cyclotomicSquare = a.cyclotomicSquare()
        
        let expected = Fp12.init(coeffs: [
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ed8",
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000588d",
            "0207ba9c7a2b7f9dc292d97a63bf37417618d4c905b429dfc5143af94d1baf79902c5806e85d73b5530cfab9a1fb2e10",
            "067ee72fac8bab1a30bb99d7661f3986b41256679a8eb8c317ec9f9ba4e60b30cfe0b7d9edf03484600c6469c6a41719",
            "093eef0334059377e4fd5407be3ff6f02c9418c4a565653adb4a85d462575181a34f3fb1348f19aed6c720b2a617046f",
            "0c8d8f2f27118ab59f3bdf46d5d8892937cb795ad0fbfbe7994908ddb0e395eeaba9e3e98f81cd30261b34a67b6db234",
            "093b4ed694d7995d866bdf3272a3faaddb3ecb22e00b25f8da9ceb5a74d1b783437bc963473239db6708266556b4d67b",
            "0d4440f1bde7e5ddd27ffb0c291b567232f1608e0b988cb5ee112066d684404fbeed3bbdd14278f59932dda6c20aa147",
            "1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffff66c1",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002846",
            "120f79a6b9194c5dacd76ed7aa016855be479f1611bc8e3e5fa212611820c2eb2f528f53043dbdd37b93257634782a6b",
            "0c46b1673dcb195a56c5673832b7b33a2bb470640f7bfc41e9a4972855812633bcc472146266af2d8b77468ad16c7369",
        ].map(BigInt.init(hex:)))
        
        XCTAssertEqual(cyclotomicSquare, expected)
    }
}

extension Fp12: Arbitrary {
    public static var arbitrary: Gen<Self> {
        .compose { composer in
            Self(
                c0: composer.generate(using: Fp6.arbitrary),
                c1: composer.generate(using: Fp6.arbitrary)
            )
        }
    }
}
